/**
 * Created by zhangqi on 16/10/9.
 *
 * * IFlyIatSession-1.0.1
 * 
 * 动作
 * 1.发送音频 如果未结束 缓冲6组发送 audiostatu:2 代表未结束 若结束 发送缓冲区数据，发送结尾数据 audiostatu:4代表结束
 * 2.获取结果 停止录音 发送空的 终止音频 发送获取结果的指令
 * 3.会话结束 发送会话结束指令
 *
 * 动作流程
 * 1. 初始化websocket
 * 2. websocket onopen -> 发送session begin 请求
 * 3. 收到应答(cmd = ssb)获取sid,初始化会话，开始采集音频
 * 4. 收集音频 通过websocket上传服务器
 * 5. 到达末端（用户触发 or 本地检测 ）发起音频结束指令，发起获取结果指令
 * 6. 收到结果应答，发送会话结束指令，结束会话
 */
var IFlyIatSession = (function (window, navigator) {
    var recordWorkerCode = function(){
        return window.URL.createObjectURL(new Blob(['var sampleRate,outputBufferLength,recBuffers=[],dataBuffers=[];function init(t){sampleRate=t.sampleRate,outputBufferLength=t.outputBufferLength}function reset(){recBuffers=[],dataBuffers=[]}function exportPcm(){this.postMessage({command:"export",type:"pcm",buffer:dataBuffers})}function record(t){var e,r=new Resampler(sampleRate,16e3,1,outputBufferLength,!0),s=[];for(e=0;e<t.length;e++)s.push(t[e]);var i=r.resampler(s),a=new Float32Array(i);for(e=0;e<i;e++)a[e]=r.outputBuffer[e];var n=floatTo16BitPCM(a);for(e=0;e<n.length;e++)recBuffers.push(n[e]);for(;320<recBuffers.length;){var f=recBuffers.splice(0,320),h=new Int16Array(f);dataBuffers.push(h);var o=getVolume(h);this.postMessage({volume:o,buffer:h})}}onmessage=function(t){switch(t.data.command){case"init":init(t.data.config);break;case"record":record(t.data.buffer);break;case"reset":reset();break;case"exportPcm":exportPcm();break;case"exportWav":exportWav()}};var getVolume=function(t){var r,s,e=[329,421,543,694,895,1146,1476,1890,2433,3118,4011,5142,6612,8478,10900,13982,17968,23054,29620,38014,48828,62654,80491,103294,132686,170366,218728,280830];return r=function(t){if(null==t||t.byteLength<=2)return 0;var e,r=0;for(e=0;e<t.length;e++)r+=t[e];r/=t.length;var s=0;for(e=0;e<t.length;e++)s+=parseInt(Math.pow(t[e]-r,2))>>9;return s/=t.length,parseInt(s)}(t),s=30,e.every(function(t,e){return!(r<t&&(s=e,1))}),s};function floatTo16BitPCM(t){for(var e=new Int16Array(t.length),r=0;r<t.length;r++){var s=Math.max(-1,Math.min(1,t[r]));e[r]=s<0?32768*s:32767*s}return e}function Resampler(t,e,r,s,i){this.fromSampleRate=t,this.toSampleRate=e,this.channels=0|r,this.outputBufferSize=s,this.noReturn=!!i,this.initialize()}Resampler.prototype.initialize=function(){if(!(0<this.fromSampleRate&&0<this.toSampleRate&&0<this.channels))throw new Error("Invalid settings specified for the resampler.");this.fromSampleRate==this.toSampleRate?(this.resampler=this.bypassResampler,this.ratioWeight=1):(this.fromSampleRate<this.toSampleRate?(this.lastWeight=1,this.resampler=this.compileLinearInterpolation):(this.tailExists=!1,this.lastWeight=0,this.resampler=this.compileMultiTap),this.ratioWeight=this.fromSampleRate/this.toSampleRate,this.initializeBuffers())},Resampler.prototype.compileLinearInterpolation=function(t){var e=t.length,r=this.outputBufferSize;if(e%this.channels==0){if(0<e){for(var s,i=this.ratioWeight,a=this.lastWeight,n=0,f=0,h=0,o=this.outputBuffer;a<1;a+=i)for(n=1-(f=a%1),s=0;s<this.channels;++s)o[h++]=this.lastOutput[s]*n+t[s]*f;for(a--,e-=this.channels,sourceOffset=Math.floor(a)*this.channels;h<r&&sourceOffset<e;){for(n=1-(f=a%1),s=0;s<this.channels;++s)o[h++]=t[sourceOffset+s]*n+t[sourceOffset+this.channels+s]*f;a+=i,sourceOffset=Math.floor(a)*this.channels}for(s=0;s<this.channels;++s)this.lastOutput[s]=t[sourceOffset++];return this.lastWeight=a%1,this.bufferSlice(h)}return this.noReturn?0:[]}throw new Error("Buffer was of incorrect sample length.")},Resampler.prototype.compileMultiTap=function(t){var e=[],r=t.length,s=this.outputBufferSize;if(r%this.channels==0){if(0<r){for(var i=this.ratioWeight,a=0,n=0;n<this.channels;++n)e[n]=0;var f=0,h=0,o=!this.tailExists;this.tailExists=!1;var u=this.outputBuffer,l=0,p=0;do{if(o)for(a=i,n=0;n<this.channels;++n)e[n]=0;else{for(a=this.lastWeight,n=0;n<this.channels;++n)e[n]+=this.lastOutput[n];o=!0}for(;0<a&&f<r;){if(!((h=1+f-p)<=a)){for(n=0;n<this.channels;++n)e[n]+=t[f+n]*a;p+=a,a=0;break}for(n=0;n<this.channels;++n)e[n]+=t[f++]*h;p=f,a-=h}if(0!=a){for(this.lastWeight=a,n=0;n<this.channels;++n)this.lastOutput[n]=e[n];this.tailExists=!0;break}for(n=0;n<this.channels;++n)u[l++]=e[n]/i}while(f<r&&l<s);return this.bufferSlice(l)}return this.noReturn?0:[]}throw new Error("Buffer was of incorrect sample length.")},Resampler.prototype.bypassResampler=function(t){return this.noReturn?(this.outputBuffer=t).length:t},Resampler.prototype.bufferSlice=function(e){if(this.noReturn)return e;try{return this.outputBuffer.subarray(0,e)}catch(t){try{return this.outputBuffer.length=e,this.outputBuffer}catch(t){return this.outputBuffer.slice(0,e)}}},Resampler.prototype.initializeBuffers=function(){try{this.outputBuffer=new Float32Array(this.outputBufferSize),this.lastOutput=new Float32Array(this.channels)}catch(t){this.outputBuffer=[],this.lastOutput=[]}};'],
            {type: "text/javascript"}));
    };
    var vadWorkerCode = function(){
        return window.URL.createObjectURL(new Blob(['function log(_){postMessage({type:"debug",message:_})}onmessage=function(_){switch(log(_.data),_.data.command){case"init":Vad();break;case"appendData":AppendData(_.data.pcmData,_.data.nSamples)}};var m_iVADState,m_s32ESil,m_s32ELow,m_s32EHigh,m_s32EMax,m_latestVolume,m_pPCMBuffer,m_iPCMStart,m_iPCMEnd,m_pPCMFrame,m_ppPCM,m_iFrameEnd,m_pFrameEnergy,m_iFrameHead,m_iFrameCheck,m_iSpeechBegin,m_iSpeechEnd,m_iSpeechEnd2,m_iFrameCurrent,m_nCheckEndFrame,ESVadStatus={ESVAD_SILENCE:0,ESVAD_CHECK_BEGIN:1,ESVAD_ACTIVE:2,ESVAD_CHECK_END:3,ESVAD_INACTIVE:4},ESVAD_DISABLE=0,ES_CMN_UPDATE_RATE=46,ES_CMN_UPDATE_RATE_C0=12,ESR_PCMBUFFER_SIZE=163840,ESR_FRAME_SIZE=200,ESR_FRAME_STEP=80,ESR_BACK_FRAMES=129,ESR_MAX_RESULT=16,RECORD_SAMPLESPERFRAME_DEF=200,ESIL_CHKBG_FRAMENUM=3,ELOW_CHKBG_FRAMENUM=20,EHIGH_CHKBG_FRAMENUM=20,EHIGH_CHKEND_FRAMENUM_SHORT=200,EHIGH_CHKEND_FRAMENUM_LONG=80,ELOW_CHKEND_FRAMENUM=60,ESR_FRAME_MAXNUM=ESR_BACK_FRAMES,ESR_MFCCFRAME_MAXNUM=9,MINIMUM_SPEECH_FRAMENUM=18,ELOW_VALIDREQ_THRESH=5,EHIGH_VALIDREQ_THRESH=4,EHIGH_ENDVALID_THRESH=3,ELOW_ENDVALID_THRESH=10,SPEECH_BEGIN_MARGIN=25,SPEECH_END_MARGIN=40,ESR_MAX_EHIGH_COEFF=256,TRANSFORM_PREEMCOEF_DEF=31785,TRANSFORM_CHANSNUM_DEF=24,TRANSFORM_CEPSNUM_DEF=11,TRANSFORM_STEP_DEF=1,FEATURE_DIMNESION=36,TRANSFROM_CEPLIFTER_DEF=22,TRANSFORM_FFTNUM_DEF=512,TRANSFORM_HALFFFTNUM_DEF=256,ESR_FEATURE_MEMSIZE=2*FEATURE_DIMNESION,ESR_SKIP_FRAME=8,ESR_MATH_LN2=2907270,ESR_MATH_10LN2=29072700,g_s16SimpleLnTable=[0,32,64,96,128,160,191,223,255,287,318,350,382,413,445,477,508,540,571,602,634,665,697,728,759,790,822,853,884,915,946,977,1008,1039,1070,1101,1132,1163,1194,1225,1256,1286,1317,1348,1379,1409,1440,1471,1501,1532,1562,1593,1623,1654,1684,1714,1745,1775,1805,1836,1866,1896,1926,1956,1987,2017,2047,2077,2107,2137,2167,2197,2227,2256,2286,2316,2346,2376,2406,2435,2465,2495,2524,2554,2583,2613,2643,2672,2702,2731,2760,2790,2819,2849,2878,2907,2936,2966,2995,3024,3053,3082,3111,3141,3170,3199,3228,3257,3286,3315,3343,3372,3401,3430,3459,3488,3516,3545,3574,3603,3631,3660,3688,3717,3746,3774,3803,3831,3860,3888,3916,3945,3973,4001,4030,4058,4086,4115,4143,4171,4199,4227,4255,4283,4311,4340,4368,4396,4424,4451,4479,4507,4535,4563,4591,4619,4646,4674,4702,4730,4757,4785,4813,4840,4868,4895,4923,4950,4978,5005,5033,5060,5088,5115,5143,5170,5197,5224,5252,5279,5306,5333,5361,5388,5415,5442,5469,5496,5523,5550,5577,5604,5631,5658,5685,5712,5739,5766,5792,5819,5846,5873,5900,5926,5953,5980,6006,6033,6060,6086,6113,6139,6166,6192,6219,6245,6272,6298,6324,6351,6377,6403,6430,6456,6482,6509,6535,6561,6587,6613,6640,6666,6692,6718,6744,6770,6796,6822,6848,6874,6900,6926,6952,6977,7003,7029,7055,7081,7107,7132,7158,7184,7209,7235,7261,7286,7312,7338,7363,7389,7414,7440,7465,7491,7516,7542,7567,7592,7618,7643,7668,7694,7719,7744,7770,7795,7820,7845,7870,7896,7921,7946,7971,7996,8021,8046,8071,8096,8121,8146,8171,8196,8221,8246,8271,8295,8320,8345,8370,8395,8419,8444,8469,8494,8518,8543,8568,8592,8617,8641,8666,8691,8715,8740,8764,8789,8813,8837,8862,8886,8911,8935,8959,8984,9008,9032,9057,9081,9105,9129,9154,9178,9202,9226,9250,9274,9299,9323,9347,9371,9395,9419,9443,9467,9491,9515,9539,9562,9586,9610,9634,9658,9682,9706,9729,9753,9777,9801,9824,9848,9872,9895,9919,9943,9966,9990,10013,10037,10061,10084,10108,10131,10155,10178,10202,10225,10248,10272,10295,10319,10342,10365,10389,10412,10435,10458,10482,10505,10528,10551,10574,10598,10621,10644,10667,10690,10713,10736,10759,10782,10805,10828,10851,10874,10897,10920,10943,10966,10989,11012,11035,11058,11080,11103,11126,11149,11171,11194,11217,11240,11262,11285,11308,11330,11353,11376,11398,11421,11443,11466,11489,11511,11534,11556,11579,11601,11623,11646,11668,11691,11713,11735,11758,11780,11803,11825,11847,11869,11892,11914,11936,11958,11981,12003,12025,12047,12069,12091,12114,12136,12158,12180,12202,12224,12246,12268,12290,12312,12334,12356,12378,12400,12422,12444,12465,12487,12509,12531,12553,12575,12596,12618,12640,12662,12683,12705,12727,12749,12770,12792,12814,12835,12857,12878,12900,12922,12943,12965,12986,13008,13029,13051,13072,13094,13115,13137,13158,13179,13201,13222,13244,13265,13286,13308,13329,13350,13372,13393,13414,13435,13457,13478,13499,13520,13541,13562,13584,13605,13626,13647,13668,13689,13710,13731,13752,13773,13794,13815,13836,13857,13878,13899,13920,13941,13962,13983,14004,14025,14045,14066,14087,14108,14129,14149,14170,14191,14212,14232,14253,14274,14295,14315,14336,14357,14377,14398,14418,14439,14460,14480,14501,14521,14542,14562,14583,14603,14624,14644,14665,14685,14706,14726,14747,14767,14787,14808,14828,14848,14869,14889,14909,14930,14950,14970,14991,15011,15031,15051,15071,15092,15112,15132,15152,15172,15192,15213,15233,15253,15273,15293,15313,15333,15353,15373,15393,15413,15433,15453,15473,15493,15513,15533,15553,15573,15593,15612,15632,15652,15672,15692,15712,15731,15751,15771,15791,15811,15830,15850,15870,15889,15909,15929,15948,15968,15988,16007,16027,16047,16066,16086,16105,16125,16145,16164,16184,16203,16223,16242,16262,16281,16301,16320,16340,16359,16378,16398,16417,16437,16456,16475,16495,16514,16533,16553,16572,16591,16610,16630,16649,16668,16687,16707,16726,16745,16764,16784,16803,16822,16841,16860,16879,16898,16917,16937,16956,16975,16994,17013,17032,17051,17070,17089,17108,17127,17146,17165,17184,17203,17222,17240,17259,17278,17297,17316,17335,17354,17373,17391,17410,17429,17448,17467,17485,17504,17523,17542,17560,17579,17598,17616,17635,17654,17673,17691,17710,17728,17747,17766,17784,17803,17821,17840,17859,17877,17896,17914,17933,17951,17970,17988,18007,18025,18044,18062,18080,18099,18117,18136,18154,18173,18191,18209,18228,18246,18264,18283,18301,18319,18337,18356,18374,18392,18411,18429,18447,18465,18483,18502,18520,18538,18556,18574,18592,18611,18629,18647,18665,18683,18701,18719,18737,18755,18773,18791,18810,18828,18846,18864,18882,18900,18917,18935,18953,18971,18989,19007,19025,19043,19061,19079,19097,19114,19132,19150,19168,19186,19204,19221,19239,19257,19275,19293,19310,19328,19346,19364,19381,19399,19417,19434,19452,19470,19487,19505,19523,19540,19558,19576,19593,19611,19628,19646,19663,19681,19699,19716,19734,19751,19769,19786,19804,19821,19839,19856,19873,19891,19908,19926,19943,19961,19978,19995,20013,20030,20048,20065,20082,20100,20117,20134,20151,20169,20186,20203,20221,20238,20255,20272,20290,20307,20324,20341,20358,20376,20393,20410,20427,20444,20461,20479,20496,20513,20530,20547,20564,20581,20598,20615,20632,20649,20666,20683,20700,20717,20734,20751,20768,20785,20802,20819,20836,20853,20870,20887,20904,20921,20938,20955,20972,20988,21005,21022,21039,21056,21073,21089,21106,21123,21140,21157,21173,21190,21207,21224,21240,21257,21274,21291,21307,21324,21341,21357,21374,21391,21407,21424,21441,21457,21474,21491,21507,21524,21540,21557,21573,21590,21607,21623,21640,21656,21673,21689,21706,21722,21739,21755,21772,21788,21805,21821,21837,21854,21870,21887,21903,21920,21936,21952,21969,21985,22001,22018,22034,22050,22067,22083,22099,22116,22132,22148,22164,22181,22197,22213,22229,22246,22262,22278,22294,22311,22327,22343,22359,22375,22391,22408,22424,22440,22456,22472,22488,22504,22520,22537,22553,22569,22585,22601,22617,22633,22649,22665,22681,22697],enableVoiceDataCache=!0,outAudioList=new Array,speechStart=!1,speechEnd=!1;function VadState(){return m_iVADState}function Volume(){return m_latestVolume}function SpeechStart(){return speechStart}function SpeechEnd(){return speechEnd}function Vad(){log("vad init"),m_pPCMBuffer=new Array,m_pPCMFrame=new Array,m_pFrameEnergy=new Array,m_ppPCM=new Array,Reset()}function Reset(){m_s32ESil=m_iSpeechBegin=m_iFrameHead=m_iFrameEnd=0,m_iVADState=ESVadStatus.ESVAD_SILENCE,m_iFrameCurrent=parseInt(ESR_SKIP_FRAME),m_iPCMStart=m_iPCMEnd=m_iSpeechEnd=0}function BlockCopy(_,E,e,a,m){for(var S=0;S<m;)m_ppPCM[a+S]=_[E+S],S++}function AppendData(_,E){var e,a;if(log("call AppendData function, pcmDataLength : "+E+", pcmData[0] : "+_[0]),1==E){var m=m_iPCMEnd;return m_pPCMBuffer[m]=_[0],ESR_PCMBUFFER_SIZE<=++m&&(m-=ESR_PCMBUFFER_SIZE),m==m_iPCMStart?7:(m_iPCMEnd=m,0)}if((e=parseInt(m_iPCMEnd-m_iPCMStart))<0&&(e+=ESR_PCMBUFFER_SIZE),ESR_PCMBUFFER_SIZE-1<(e+=E))return 7;if(m_iPCMEnd+E<ESR_PCMBUFFER_SIZE){for(a=0;a<E;a++)m_pPCMBuffer[m_iPCMEnd+a]=_[a];m_iPCMEnd+=E}else{var S;for(S=ESR_PCMBUFFER_SIZE-m_iPCMEnd,a=0;a<S;a++)m_pPCMBuffer[m_iPCMEnd+a]=_[a];for(a=0;a<E-S;a++)m_pPCMBuffer[a]=_[S+a];m_iPCMEnd=E-S}for(log("call AppendData function, m_iPCMEnd : "+m_iPCMEnd);;){var r=!1;if(ESVadStatus.ESVAD_INACTIVE!=m_iVADState&&(r=GetOneFrame())){if(m_pFrameEnergy[m_iFrameEnd%ESR_FRAME_MAXNUM]=CalcFrameEnergy(),BlockCopy(m_pPCMFrame,0,m_ppPCM,m_iFrameEnd%parseInt(ESR_FRAME_MAXNUM)*parseInt(ESR_FRAME_STEP)*2,2*parseInt(ESR_FRAME_STEP)),++m_iFrameEnd<parseInt(ESIL_CHKBG_FRAMENUM))continue;CheckVoice()}if(m_iFrameCurrent<m_iSpeechEnd){if(enableVoiceDataCache){var t=new Array;BlockCopy(m_ppPCM,m_iFrameCurrent%parseInt(ESR_FRAME_MAXNUM)*parseInt(ESR_FRAME_STEP)*2,t,0,parseInt(2*ESR_FRAME_STEP)),outAudioList[outAudioList.length]=t}m_iFrameCurrent++}if(ESVadStatus.ESVAD_INACTIVE==m_iVADState&&m_iFrameCurrent<m_iSpeechEnd){if(enableVoiceDataCache){t=new Array;BlockCopy(m_ppPCM,m_iFrameCurrent%parseInt(ESR_FRAME_MAXNUM)*parseInt(ESR_FRAME_STEP)*2,t,0,parseInt(2*ESR_FRAME_STEP)),outAudioList[outAudioList.length]=t}m_iFrameCurrent++}if(!r)break}var i=m_latestVolume=0;for(a=0;a<E;a++){var n;i+=(n=_[a]>>2)*n+8>>4}return(i/=E)<256?m_latestVolume=0:9<(m_latestVolume=simple_table_ln(i,6)>>22)&&(m_latestVolume=9),log("vad volume : "+m_latestVolume),postMessage({command:"volume",message:m_latestVolume}),0}function GetVoiceData(){var _=null;return 0<outAudioList.Count&&(_=outAudioList[0],outAudioList.splice(0,1)),_}function GetVoiceDataSamples(){return outAudioList.Count*parseInt(ESR_FRAME_STEP)}function simple_table_ln(_,E){var e,a=E;return 0==(4294901760&++_)&&(_<<=16,a+=16),0==(4278190080&_)&&(_<<=8,a+=8),0==(4026531840&_)&&(_<<=4,a+=4),0==(3221225472&_)&&(_<<=2,a+=2),0==(2147483648&_)&&(_<<=1,a+=1),e=g_s16SimpleLnTable[(_-=2147483648)>>21]<<7,e+=(31-a)*parseInt(ESR_MATH_LN2)}function CalcFrameEnergy(){var _,E,e=0;for(_=0;_<ESR_FRAME_SIZE;_++)e+=m_pPCMFrame[_];for(e/=parseInt(ESR_FRAME_SIZE),_=E=0;_<ESR_FRAME_SIZE;_++){var a;E+=(a=m_pPCMFrame[_]-e)*a+128>>8}return E>>=2,Math.max(40,E)}function GetOneFrame(){var _=parseInt(m_iPCMEnd-m_iPCMStart);if(_<0&&(_+=parseInt(ESR_PCMBUFFER_SIZE)),_<ESR_FRAME_SIZE)return!1;if(m_iPCMStart+ESR_FRAME_SIZE<=ESR_PCMBUFFER_SIZE){for(var E=0;E<ESR_FRAME_SIZE;E++)m_pPCMFrame[E]=m_pPCMBuffer[m_iPCMStart+E];m_iPCMStart+=ESR_FRAME_STEP}else{var e=ESR_PCMBUFFER_SIZE-m_iPCMStart;for(E=0;E<e;E++)m_pPCMFrame[E]=m_pPCMBuffer[m_iPCMStart+E];for(E=0;E<ESR_FRAME_SIZE-e;E++)m_pPCMFrame[e+E]=m_pPCMBuffer[E];ESR_PCMBUFFER_SIZE<(m_iPCMStart+=ESR_FRAME_STEP)&&(m_iPCMStart-=ESR_PCMBUFFER_SIZE)}return!0}function CheckEngery(_,E,e){for(var a=0,m=0;a<e;a++)if(m_pFrameEnergy[(m_iFrameCheck+a)%ESR_FRAME_MAXNUM]>_?m++:m=0,E<m)return m_iFrameCheck=a+m_iFrameCheck-E,!0;return!1}function CheckVoice(){var _,E,e,a,m;for(_=m_iFrameEnd-m_iFrameHead;0!=_;){if(0==(_=m_iFrameEnd-m_iFrameHead))return;if(0==m_s32ESil){if(_<ESIL_CHKBG_FRAMENUM)return;if(m_iFrameHead<=ESR_FRAME_SIZE/ESR_FRAME_STEP){++m_iFrameHead;continue}for(m_nCheckEndFrame=parseInt(EHIGH_CHKEND_FRAMENUM_SHORT),E=m_s32ESil=0;E<ESIL_CHKBG_FRAMENUM;E++)m_s32ESil+=m_pFrameEnergy[(m_iFrameHead+E)%ESR_FRAME_MAXNUM];m_s32ESil/=parseInt(ESIL_CHKBG_FRAMENUM),m_iFrameCheck=m_iFrameHead+1,a=m_s32ESil+200,m_s32ELow=parseInt(20*a/((simple_table_ln(a,0)+ESR_MATH_10LN2>>18)-64)),m_s32ELow<<=5,m_s32ELow-=200}switch(log("check vad state : "+m_iVADState),m_iVADState){case ESVadStatus.ESVAD_SILENCE:if(parseInt(m_iFrameEnd-m_iFrameCheck)<ELOW_CHKBG_FRAMENUM)return;if(CheckEngery(m_s32ELow,parseInt(ELOW_VALIDREQ_THRESH),parseInt(ELOW_CHKBG_FRAMENUM))){for(E=m_iFrameHead+1;E<=m_iFrameCheck-ESIL_CHKBG_FRAMENUM;++E){for(e=a=0;e<ESIL_CHKBG_FRAMENUM;e++)a+=m_pFrameEnergy[(E+e)%ESR_FRAME_MAXNUM];(a/=parseInt(ESIL_CHKBG_FRAMENUM))<m_s32ESil&&(m_s32ESil=a,m_iFrameHead=E)}m=((a=parseInt(simple_table_ln(m_s32ESil,0)+ESR_MATH_10LN2>>14))-2304)*(a-2304)>>12,m_s32EHigh=360*m_s32ESil/(m+=512)<<5,m_iSpeechBegin=m_iFrameCheck,m_iVADState=ESVadStatus.ESVAD_CHECK_BEGIN,speechStart=!0}else m_s32ESil=0,m_iVADState=ESVadStatus.ESVAD_SILENCE,m_iFrameHead++;break;case ESVadStatus.ESVAD_CHECK_BEGIN:if(parseInt(m_iFrameEnd-m_iFrameCheck)<EHIGH_CHKBG_FRAMENUM)return;if(CheckEngery(m_s32EHigh,parseInt(EHIGH_VALIDREQ_THRESH),parseInt(EHIGH_CHKBG_FRAMENUM)))m_iFrameCheck=(m_iFrameHead=m_iSpeechBegin)+1,m_iFrameCurrent=Math.max(m_iSpeechBegin-parseInt(SPEECH_BEGIN_MARGIN),parseInt(ESR_SKIP_FRAME)),m_iVADState=ESVadStatus.ESVAD_ACTIVE,m_iSpeechEnd=Math.min(m_iSpeechBegin+parseInt(SPEECH_END_MARGIN),m_iFrameEnd),m_iSpeechEnd2=m_iSpeechBegin,Math.max(m_iSpeechBegin,parseInt(ESR_SKIP_FRAME)),m_s32EMax=0;else m_s32ESil=0,m_iVADState=ESVadStatus.ESVAD_SILENCE,m_iFrameHead++;break;case ESVadStatus.ESVAD_ACTIVE:(a=m_pFrameEnergy[m_iFrameHead%ESR_FRAME_MAXNUM])<m_s32ELow?(m_iVADState=ESVadStatus.ESVAD_CHECK_END,m_iFrameCheck=m_iFrameHead+1):(m_s32EMax=Math.max(m_s32EMax,a),m_s32EHigh*ESR_MAX_EHIGH_COEFF<m_s32EMax&&(a=simple_table_ln(m_s32EMax/ESR_MAX_EHIGH_COEFF,-10)>>14,a=(a-=2304)*a>>12,a+=512,a=simple_table_ln(a=m_s32EMax/(16*parseInt(ESR_MAX_EHIGH_COEFF))*a/720,-10)>>14,a=(a-=2304)*a>>12,a+=512,a=m_s32EMax/(16*parseInt(ESR_MAX_EHIGH_COEFF))*a/720,m_s32ELow=20*(a=(m_s32ESil=a)+200)/parseInt((simple_table_ln(a,0)+ESR_MATH_10LN2>>18)-64),m_s32ELow<<=5,m_s32ELow-=200,m=((a=parseInt(simple_table_ln(m_s32ESil,0)+ESR_MATH_10LN2>>14))-2304)*(a-2304)>>12,m_s32EHigh=360*m_s32ESil/(m+=512)<<5),m_iFrameHead++),m_iSpeechEnd=Math.min(m_iFrameHead+parseInt(SPEECH_END_MARGIN),m_iFrameEnd),m_iSpeechEnd2=m_iFrameHead;break;case ESVadStatus.ESVAD_CHECK_END:if(m_iSpeechEnd=Math.min(m_iFrameHead+parseInt(SPEECH_END_MARGIN),m_iFrameEnd),m_iSpeechEnd2=m_iFrameHead,m_iFrameEnd-m_iFrameCheck<m_nCheckEndFrame)return;if(!CheckEngery(m_s32EHigh,parseInt(EHIGH_ENDVALID_THRESH),m_nCheckEndFrame))return m_iVADState=ESVadStatus.ESVAD_INACTIVE,speechEnd=!0,log("local vad check end!!!!"),postMessage({command:"esvad",message:"end"}),m_iFrameCheck=m_iFrameHead+1,m_s32ESil=0,void(m_iSpeechEnd-m_iSpeechBegin<MINIMUM_SPEECH_FRAMENUM+SPEECH_END_MARGIN&&(m_iSpeechEnd=m_iSpeechBegin=0,m_iVADState=ESVadStatus.ESVAD_SILENCE));log("local vad check end!!!!"+CheckEngery(m_s32EHigh,parseInt(EHIGH_ENDVALID_THRESH),m_nCheckEndFrame)),m_iFrameHead++,m_iVADState=ESVadStatus.ESVAD_ACTIVE,m_nCheckEndFrame=parseInt(EHIGH_CHKEND_FRAMENUM_SHORT);break;case ESVadStatus.ESVAD_INACTIVE:return}}}'],
            {type: "text/javascript"}));
    };

    var settings = {
        "serverUrl":"",
        "recordWorkerPath": null,
        "vadWorkerPath": null,
        "useVad":true
    };


    var recording = false;
    var rec_state = "";
    var audioStream = null;
    var audioCtx = null;
    var audioNode = {
        "source":null,
        "scriptNode":null
    };

    var env = {
        "browserId":null,
        "bufferSize":null,
        "host":null,
        "isSupport":true
    };

    var recorderWorker = null;
    var vadWorker = null;
    var dataBuffer = [];

    var newRecorderWorker = function (path) {
        var recorderWorker = new Worker(path);
        recorderWorker.onmessage = function (e) {
            if(e.data.command == "export"){
                if(e.data.type == "pcm") callback.onExportPcm(new Blob(e.data.buffer,{type:"audio/pcm"}));
                else if(e.data.type == "wav") callback.onExportWav(new Blob(e.data.buffer,{type:"audio/wav"}));
            }
            volumeCheck.listen(e.data.volume);
            callback.onVolume(e.data.volume);

            var buffer = e.data.buffer;
            var data = new Int16Array(buffer);
            if(settings.useVad) {
                vadWorker.sendData(data);
            }
            dataBuffer.push(data);
        };
        var init = function (sampleRate) {
            recorderWorker.postMessage({
                command: 'init',
                config: {
                    sampleRate: sampleRate,
                    outputBufferLength: env.bufferSize
                }
            });
        };
        var reset = function () {
            recorderWorker.postMessage({command: 'reset'});
        };
        var sendData = function (data) {
            recorderWorker.postMessage({
                command: 'record',
                buffer: data
            });
        };
        var exportWav = function(){
            recorderWorker.postMessage({command: 'exportWav'});
        };
        var exportPcm = function(){
            recorderWorker.postMessage({command: 'exportPcm'});
        };
        return {
            "init": init,
            "reset": reset,
            "sendData": sendData,
            "exportWav":exportWav,
            "exportPcm":exportPcm
        }
    };


    var newVadWorker = function (path) {
        var vadWorker = new Worker(path);
        vadWorker.onmessage = function (e) {
            if (e.data.command == "esvad" && e.data.message == 'end') {
                iatEvent.getResult();
            }
        };
        var init = function () {
            vadWorker.postMessage({command: 'init'});
        };
        var sendData = function (data) {
            vadWorker.postMessage({
                command: 'appendData',
                pcmData: data,
                nSamples: data.length
            });
        };
        return {
            "init": init,
            "sendData": sendData
        };
    };


    var recorderStatus = {
        "idle": "idle",//空闲
        "sessionBegin": "ssb",//session begin 会话开始
        "audioWrite": "auw",//worker write 写入音频
        "getResult": "grs",//get result 获取结果
        "sessionEnd": "sse"//session end 会话结束
    };
    var pcmBlob = null;
    var callback = {
        "onResult": function (code, re) {
        },
        "onVolume": function () {
        },
        "onError": function (eventName) {
        },
        "onProcess": function (status) {
        },
        "onExportPcm":function(blob){
            pcmBlob = blob;
            ajax(settings.serverUrl,blob,function(data){
                var obj = JSON.parse(data);
                // callback.onResult(obj.code,obj.data.text);
                callback.onResult(obj);
            });
            callback.onProcess("onEnd");
        },
        "onExportWav":function(){
        }
    };



    var utils = {
        "log": function (message, level) {
            if (level > 0) {
                console.log(message);
            }
        },

        "getBufferSize": function () {
            var ua = navigator.userAgent;
            if (/(Win(dows )?NT 6\.2)/.test(ua)) {
                return 1024;  //Windows 8
            } else if (/(Win(dows )?NT 6\.1)/.test(ua)) {
                return 1024;  //Windows 7
            } else if (/(Win(dows )?NT 6\.0)/.test(ua)) {
                return 2048;  //Windows Vista
            } else if (/Win(dows )?(NT 5\.1|XP)/.test(ua)) {
                return 4096;  //Windows XP
            } else if (/Mac|PPC/.test(ua)) {
                return 1024;  //Mac OS X
            } else if (/Linux/.test(ua)) {
                return 8192;  //Linux
            } else if (/iPhone|iPad|iPod/.test(ua)) {
                return 2048;  //iOS
            } else {
                return 16384;  //Otherwise
            }
        },
        "checkIsSupport": function () {
            if (!navigator.mediaDevices.getUserMedia) {
                return false;
            }
            if (!window.AudioContext) {
                return false
            }
            if (!window.Worker) {
                return false
            }
            if (!window.URL){
                return false;
            }
            return true
        },
        "extend":function(defaults, options){
            var extended = {};
            var prop;
            for (prop in defaults) {
                if (Object.prototype.hasOwnProperty.call(defaults, prop)) {
                    extended[prop] = defaults[prop];
                }
            }
            for (prop in options) {
                if (Object.prototype.hasOwnProperty.call(options, prop)) {
                    extended[prop] = options[prop];
                }
            }
            return extended;
        },
        "getBrowserId":function(){
            if(typeof(Fingerprint2) == "function"){
                new Fingerprint2().get(function(result){
                    env.browserId = result;
                });
            }else{
                env.browserId = "unknow:"+btoa(navigator.userAgent).substr(0,16);
            }
        },
        "checkParam":function(item,params){
            if(typeof(params) == "string"){
                var temp = params.split(",");
                params = new Object();
                for(var i=0;i < temp.length;i++){
                    var kv = temp[i].split("=");
                    params[kv[0]] = kv[1];
                }
            }
            if(item in params){
                return true;
            }
            return false;

        }
    };

    var iatEvent = (function () {
        var startRecord = function () {
            /* 写音频接口 或 非首次初始化 则不进行多媒体初始化*/
            if (audioStream == null) {
                initMedia();
                recorderWorker.init();
                return;
            }
            callback.onProcess('onStart');//开始启动录音
            callback.onProcess('started');//录音

            rec_state = recorderStatus.audioWrite;

            recording = true;
            volumeCheck.start();

            recorderWorker.reset();
            if(settings.useVad){
                vadWorker.init();
            }

        };
        var getResult = function () {
            stopRecord();//停止录音
            if (rec_state == recorderStatus.audioWrite) {//首次从录音状态 切换到获取结果状态
                callback.onProcess("onStop");
                rec_state = recorderStatus.getResult;
            }

            if (rec_state == recorderStatus.getResult) {
                recorderWorker.exportPcm();
            }else{
                abortSession();
                callback.onError("noRecordData");
            }
        };
        var stopRecord = function () {
            recording = false;
            volumeCheck.stop();
        };
        var abortSession = function () {
            stopRecord();
            callback.onProcess("onEnd");//初始化失败，直接调用结束回调
            rec_state = recorderStatus.idle;
        };
        return {
            "startRecord": startRecord,
            "getResult": getResult,
            "stopRecord": stopRecord,
            "abortSession": abortSession
        };
    })();

    var ajax = function(url,data,cb){
        var xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        // 添加http头，发送信息至服务器时内容编码类型
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function() {
            if (xhr.readyState == 4 && (xhr.status == 200 || xhr.status == 304)) {
                cb(xhr.responseText);
            }
        };
        xhr.send(data)
    };

    var gotStream = function (stream) {
        audioStream = stream;
        audioNode.source = audioCtx.createMediaStreamSource(stream);
        audioNode.scriptNode = audioCtx.createScriptProcessor(env.bufferSize, 1, 1);
        recorderWorker.init(audioCtx.sampleRate);

        audioNode.scriptNode.onaudioprocess = function (e) {
            if (!recording) return;
            recorderWorker.sendData(e.inputBuffer.getChannelData(0));
        };
        audioNode.source.connect(audioNode.scriptNode);
        audioNode.scriptNode.connect(audioCtx.destination);
        iatEvent.startRecord();
    };

    var initMedia = function () {
        if(audioCtx == null){
            audioCtx = new window.AudioContext();
        }
        if(audioCtx.resume) audioCtx.resume();
        navigator.mediaDevices.getUserMedia({audio: true}).then(gotStream, function (e) {
            iatEvent.abortSession();
            callback.onError("initMediaError");
        });
    };
    var volumeCheck = (function(){
        var lowVolumeLimit = 8;//音量过小
        var interval = 500;//音量判定间隔
        var maxTooLow = 5;//录音开始多少判定点提示音量过小
        var maxVolume = 0;
        var checkEventId = 0;

        var isTooLow = false;
        var tooLowCount = 0;

        var init = function(){
            maxVolume = 0;
            isTooLow = false;
            tooLowCount = 0;
        };
        var fire = function(){
            if(!isTooLow && maxVolume <lowVolumeLimit){
                tooLowCount++;
                if(tooLowCount >= maxTooLow){
                    isTooLow = true;
                    callback.onProcess("lowVolume");//音量太小
                }
                return
            }
            if(isTooLow && maxVolume >= lowVolumeLimit){
                callback.onProcess("normalVolume");//正常音量
            }
            if(maxVolume >= lowVolumeLimit){
                clearInterval(checkEventId);//一旦恢复正常，结束
                tooLowCount = 0;
            }
        };
        var start = function(){
            init();
            checkEventId = setInterval(fire,interval);
        };
        var stop = function(){
            clearInterval(checkEventId);
        };

        var listen = function(volume){
            maxVolume = Math.max(maxVolume,volume);
        };

        return {
            "start":start,
            "stop":stop,
            "listen":listen
        }
    })();
    return function (setting) {
        callback = utils.extend(callback,setting.callback);
        settings = utils.extend(settings,setting.params);
        //init
        (function () {
            //api 统一
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
            window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
            window.URL = window.URL || window.webkitURL;

            // 兼容 mediaDevices
            var promisifiedOldGUM = function (constraints, successCallback, errorCallback) {
                if (!navigator.getUserMedia) {
                    return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
                }
                return new Promise(function (resolve, reject) {
                    navigator.getUserMedia.call(navigator, constraints, resolve, reject);
                });
            };
            if (navigator.mediaDevices === undefined) {
                navigator.mediaDevices = {};
            }
            if (navigator.mediaDevices.getUserMedia === undefined) {
                navigator.mediaDevices.getUserMedia = promisifiedOldGUM;
            }

            //环境变量判断
            utils.getBrowserId();
            env.host = window.document.domain;
            env.bufferSize = utils.getBufferSize();
            env.isSupport = utils.checkIsSupport();
        })();
        this.isSupport = function () {
            return env.isSupport;
        };
        if(!env.isSupport){
            return;
        }
        settings.recordWorkerPath = recordWorkerCode();
        settings.vadWorkerPath = vadWorkerCode();

        recorderWorker = newRecorderWorker(settings.recordWorkerPath);
        if(settings.useVad) {
            vadWorker = newVadWorker(settings.vadWorkerPath);
        }
        this.start = function () {
            dataBuffer=[];
            iatEvent.startRecord();
        };
        /*
         * stop record or write worker
         */
        this.stop = function () {
            iatEvent.getResult();
        };
        /*
         * cancel recognition
         */
        this.cancel = function () {
            iatEvent.abortSession();
        };
        this.getPcm = function(){
            return pcmBlob;
        };
        this.resetCallback = function(newCallback){
            callback = utils.extend(callback,newCallback);
        };
        this.kill = function () {
            if (audioStream != null) {
                var tracks = audioStream.getAudioTracks();
                for(var i=0 ;i<tracks.length;i++){
                    tracks[i].stop();
                }
                audioStream = null;
            }
            if (audioNode.source != null) {
                // 由于部分旧浏览器不支持audioCtx.close
                audioNode.source.disconnect();
                audioNode.scriptNode.disconnect();
                audioNode.source = null;
                audioNode.scriptNode = null;
            }
        }
    }
})(window, navigator);